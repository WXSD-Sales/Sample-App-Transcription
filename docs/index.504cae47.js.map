{"mappings":"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","sources":["meeting-live-transcription-only/app.js"],"sourcesContent":["// Declare some globals that we'll need throughout\nlet activeMeeting, webex;\nlet textarea = document.getElementById('transcript');\n\n// First, let's wire our form fields up to localStorage so we don't have to\n// retype things every time we reload the page.\n\n[\n  'access-token',\n  'invitee'\n].forEach((id) => {\n  const el = document.getElementById(id);\n\n  el.value = localStorage.getItem(id);\n  el.addEventListener('change', (event) => {\n    localStorage.setItem(id, event.target.value);\n  });\n});\n\n// There's a few different events that'll let us know we should initialize\n// Webex and start listening for incoming calls, so we'll wrap a few things\n// up in a function.\nfunction connect() {\n  return new Promise((resolve) => {\n    if (!webex) {\n      webex = window.webex = Webex.init({\n        config: {\n          meetings: {\n            reconnection: {\n              enabled: true\n            }\n          }\n        },\n\n        credentials: {\n          access_token: document.getElementById('access-token').value\n        }\n      });\n    }\n\n    // Register our device with Webex cloud\n    if (!webex.meetings.registered) {\n      webex.meetings.register()\n        // Sync our meetings with existing meetings on the server\n        .then(() => webex.meetings.syncMeetings())\n        .then(() => {\n          document.getElementById('connection-status').innerText = 'connected';\n          // Our device is now connected\n          resolve();\n        })\n        // This is a terrible way to handle errors, but anything more specific is\n        // going to depend a lot on your app\n        .catch((err) => {\n          console.error(err);\n          // we'll rethrow here since we didn't really *handle* the error, we just\n          // reported it\n          throw err;\n        });\n    }\n    else {\n      // Device was already connected\n      resolve();\n    }\n  });\n}\n\n// Similarly, there are a few different ways we'll get a meeting Object, so let's\n// put meeting handling inside its own function.\nfunction bindMeetingEvents(meeting) {\n  meeting.on('meeting:receiveTranscription:started', (payload) => {\n    textarea.innerHTML += `\\n${JSON.stringify(payload)}`;\n  });\n  \n  meeting.on('meeting:receiveTranscription:stopped', () => {\n    textarea.innerHTML += `\\nNot Receiving transcription anymore!`\n  });\n  \n  meeting.on('error', (err) => {\n    console.error(err);\n  });\n\n  // Of course, we'd also like to be able to leave the meeting:\n  document.getElementById('hangup').addEventListener('click', () => {\n    meeting.leave();\n  });\n\n  return meeting;\n}\n\n// Join the meeting and add media\nfunction joinMeeting(meeting) {\n  return meeting.join({receiveTranscription: true}).then(() => {\n    textarea.innerHTML = 'Listening!'\n  });\n}\n\n// In order to simplify the state management needed to keep track of our button\n// handlers, we'll rely on the current meeting global object and only hook up event\n// handlers once.\n\ndocument.getElementById('hangup').addEventListener('click', () => {\n  if (activeMeeting) {\n    activeMeeting.leave();\n  }\n});\n\n// Now, let's set up incoming call handling\ndocument.getElementById('credentials').addEventListener('submit', (event) => {\n  // let's make sure we don't reload the page when we submit the form\n  event.preventDefault();\n\n  // The rest of the incoming call setup happens in connect();\n  connect();\n});\n\n// And finally, let's wire up dialing\ndocument.getElementById('dialer').addEventListener('submit', (event) => {\n  // again, we don't want to reload when we try to dial\n  event.preventDefault();\n\n  const destination = document.getElementById('invitee').value;\n\n  // we'll use `connect()` (even though we might already be connected or\n  // connecting) to make sure we've got a functional webex instance.\n  connect()\n    // Create the meeting\n    .then(() => webex.meetings.create(destination))\n    // Save meeting\n    .then((meeting) => {\n      activeMeeting = meeting;\n\n      return meeting;\n    })\n    // Call our helper function for binding events to meetings\n    .then(bindMeetingEvents)\n    // Pass the meeting to our join meeting helper\n    .then(joinMeeting)\n    .catch((error) => {\n      // Report the error\n      console.error(error);\n\n      // Implement error handling here\n    });\n});"],"names":[],"version":3,"file":"index.504cae47.js.map","sourceRoot":"/__parcel_source_root/"}