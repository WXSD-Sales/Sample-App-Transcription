{"mappings":"AACA,IAAIA,cAAeC,MACfC,SAAWC,SAASC,eAAe,c,SAoB9BC,UACP,OAAO,IAAIC,SAASC,IACbN,QACHA,MAAQO,OAAOP,MAAQQ,MAAMC,KAAK,CAChCC,OAAQ,CACNC,SAAU,CACRC,aAAc,CACZC,SAAS,KAKfC,YAAa,CACXC,aAAcb,SAASC,eAAe,gBAAgBa,UAMvDhB,MAAMW,SAASM,WAoBlBX,IAnBAN,MAAMW,SAASO,WAEZC,MAAI,IAAOnB,MAAMW,SAASS,iBAC1BD,MAAI,KACHjB,SAASC,eAAe,qBAAqBkB,UAAY,YAEzDf,GAAO,IAIRgB,OAAOC,IAIN,MAHAC,QAAQC,MAAMF,GAGRA,CAAG,GAKN,GAGb,C,SAISG,kBAAkBC,GAkBzB,OAjBAA,EAAQC,GAAG,wCAAyCC,IAClD5B,SAAS6B,WAAS,KAASC,KAAKC,UAAUH,IAAO,IAGnDF,EAAQC,GAAG,wCAAsC,KAC/C3B,SAAS6B,WAAS,wCAA2C,IAG/DH,EAAQC,GAAG,SAAUL,IACnBC,QAAQC,MAAMF,EAAG,IAInBrB,SAASC,eAAe,UAAU8B,iBAAiB,SAAO,KACxDN,EAAQO,OAAK,IAGRP,CACT,C,SAGSQ,YAAYR,GACnB,OAAOA,EAAQS,KAAK,CAACC,sBAAsB,IAAOlB,MAAI,KACpDlB,SAAS6B,UAAY,YAAY,GAErC,CAvFA,CACE,eACA,WACAQ,SAASC,IACT,MAAMC,EAAKtC,SAASC,eAAeoC,GAEnCC,EAAGxB,MAAQyB,aAAaC,QAAQH,GAChCC,EAAGP,iBAAiB,UAAWU,IAC7BF,aAAaG,QAAQL,EAAII,EAAME,OAAO7B,MAAK,GAC5C,IAoFHd,SAASC,eAAe,UAAU8B,iBAAiB,SAAO,KACpDlC,eACFA,cAAcmC,OAAK,IAKvBhC,SAASC,eAAe,eAAe8B,iBAAiB,UAAWU,IAEjEA,EAAMG,iBAGN1C,SAAO,IAITF,SAASC,eAAe,UAAU8B,iBAAiB,UAAWU,IAE5DA,EAAMG,iBAEN,MAAMC,EAAc7C,SAASC,eAAe,WAAWa,MAIvDZ,UAEGe,MAAI,IAAOnB,MAAMW,SAASqC,OAAOD,KAEjC5B,MAAMQ,IACL5B,cAAgB4B,EAETA,KAGRR,KAAKO,mBAELP,KAAKgB,aACLb,OAAOG,IAEND,QAAQC,MAAMA,EAAK,GAGpB","sources":["app.js"],"sourcesContent":["// Declare some globals that we'll need throughout\nlet activeMeeting, webex;\nlet textarea = document.getElementById('transcript');\n\n// First, let's wire our form fields up to localStorage so we don't have to\n// retype things every time we reload the page.\n\n[\n  'access-token',\n  'invitee'\n].forEach((id) => {\n  const el = document.getElementById(id);\n\n  el.value = localStorage.getItem(id);\n  el.addEventListener('change', (event) => {\n    localStorage.setItem(id, event.target.value);\n  });\n});\n\n// There's a few different events that'll let us know we should initialize\n// Webex and start listening for incoming calls, so we'll wrap a few things\n// up in a function.\nfunction connect() {\n  return new Promise((resolve) => {\n    if (!webex) {\n      webex = window.webex = Webex.init({\n        config: {\n          meetings: {\n            reconnection: {\n              enabled: true\n            }\n          }\n        },\n\n        credentials: {\n          access_token: document.getElementById('access-token').value\n        }\n      });\n    }\n\n    // Register our device with Webex cloud\n    if (!webex.meetings.registered) {\n      webex.meetings.register()\n        // Sync our meetings with existing meetings on the server\n        .then(() => webex.meetings.syncMeetings())\n        .then(() => {\n          document.getElementById('connection-status').innerText = 'connected';\n          // Our device is now connected\n          resolve();\n        })\n        // This is a terrible way to handle errors, but anything more specific is\n        // going to depend a lot on your app\n        .catch((err) => {\n          console.error(err);\n          // we'll rethrow here since we didn't really *handle* the error, we just\n          // reported it\n          throw err;\n        });\n    }\n    else {\n      // Device was already connected\n      resolve();\n    }\n  });\n}\n\n// Similarly, there are a few different ways we'll get a meeting Object, so let's\n// put meeting handling inside its own function.\nfunction bindMeetingEvents(meeting) {\n  meeting.on('meeting:receiveTranscription:started', (payload) => {\n    textarea.innerHTML += `\\n${JSON.stringify(payload)}`;\n  });\n  \n  meeting.on('meeting:receiveTranscription:stopped', () => {\n    textarea.innerHTML += `\\nNot Receiving transcription anymore!`\n  });\n  \n  meeting.on('error', (err) => {\n    console.error(err);\n  });\n\n  // Of course, we'd also like to be able to leave the meeting:\n  document.getElementById('hangup').addEventListener('click', () => {\n    meeting.leave();\n  });\n\n  return meeting;\n}\n\n// Join the meeting and add media\nfunction joinMeeting(meeting) {\n  return meeting.join({receiveTranscription: true}).then(() => {\n    textarea.innerHTML = 'Listening!'\n  });\n}\n\n// In order to simplify the state management needed to keep track of our button\n// handlers, we'll rely on the current meeting global object and only hook up event\n// handlers once.\n\ndocument.getElementById('hangup').addEventListener('click', () => {\n  if (activeMeeting) {\n    activeMeeting.leave();\n  }\n});\n\n// Now, let's set up incoming call handling\ndocument.getElementById('credentials').addEventListener('submit', (event) => {\n  // let's make sure we don't reload the page when we submit the form\n  event.preventDefault();\n\n  // The rest of the incoming call setup happens in connect();\n  connect();\n});\n\n// And finally, let's wire up dialing\ndocument.getElementById('dialer').addEventListener('submit', (event) => {\n  // again, we don't want to reload when we try to dial\n  event.preventDefault();\n\n  const destination = document.getElementById('invitee').value;\n\n  // we'll use `connect()` (even though we might already be connected or\n  // connecting) to make sure we've got a functional webex instance.\n  connect()\n    // Create the meeting\n    .then(() => webex.meetings.create(destination))\n    // Save meeting\n    .then((meeting) => {\n      activeMeeting = meeting;\n\n      return meeting;\n    })\n    // Call our helper function for binding events to meetings\n    .then(bindMeetingEvents)\n    // Pass the meeting to our join meeting helper\n    .then(joinMeeting)\n    .catch((error) => {\n      // Report the error\n      console.error(error);\n\n      // Implement error handling here\n    });\n});"],"names":["activeMeeting","webex","textarea","document","getElementById","connect","Promise","resolve","window","Webex","init","config","meetings","reconnection","enabled","credentials","access_token","value","registered","register","then","syncMeetings","innerText","catch","err","console","error","bindMeetingEvents","meeting","on","payload","innerHTML","JSON","stringify","addEventListener","leave","joinMeeting","join","receiveTranscription","forEach","id","el","localStorage","getItem","event","setItem","target","preventDefault","destination","create"],"version":3,"file":"index.f16461a3.js.map"}